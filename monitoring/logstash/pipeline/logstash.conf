input {
  # Docker container logs
  beats {
    port => 5044
  }

  # Application logs via TCP
  tcp {
    port => 5000
    codec => json_lines
  }

  # Syslog
  syslog {
    port => 5514
  }
}

filter {
  # Parse Docker container logs
  if [container] {
    mutate {
      add_field => { "log_source" => "docker" }
    }

    # Parse nginx access logs
    if [container][name] == "frontend" {
      grok {
        match => {
          "message" => "%{COMBINEDAPACHELOG} rt=%{NUMBER:request_time:float} uct=\"%{DATA:upstream_connect_time}\" uht=\"%{DATA:upstream_header_time}\" urt=\"%{DATA:upstream_response_time}\""
        }
        tag_on_failure => ["_grokparsefailure_nginx"]
      }

      if ![grokparsefailure_nginx] {
        date {
          match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
        }

        mutate {
          convert => {
            "response" => "integer"
            "bytes" => "integer"
            "request_time" => "float"
          }
        }

        if [response] >= 400 {
          mutate {
            add_tag => ["error"]
          }
        }

        if [response] >= 500 {
          mutate {
            add_tag => ["critical"]
          }
        }
      }
    }

    # Parse API application logs
    if [container][name] == "api" {
      json {
        source => "message"
        tag_on_failure => ["_jsonparsefailure_api"]
      }

      if ![jsonparsefailure_api] {
        if [level] == "error" {
          mutate {
            add_tag => ["error"]
          }
        }

        if [level] == "fatal" {
          mutate {
            add_tag => ["critical"]
          }
        }
      }
    }

    # Parse blockchain monitor logs
    if [container][name] == "blockchain-monitor" {
      json {
        source => "message"
        tag_on_failure => ["_jsonparsefailure_blockchain"]
      }

      if ![jsonparsefailure_blockchain] {
        # Track blockchain-specific events
        if [event_type] == "token_created" {
          mutate {
            add_tag => ["blockchain", "token_creation"]
          }
        }

        if [event_type] == "trade_executed" {
          mutate {
            add_tag => ["blockchain", "trading"]
          }
        }

        if [event_type] == "contract_error" {
          mutate {
            add_tag => ["blockchain", "error"]
          }
        }
      }
    }
  }

  # Parse structured application logs
  if [log_source] != "docker" {
    json {
      source => "message"
      tag_on_failure => ["_jsonparsefailure"]
    }

    # Extract common fields
    if ![jsonparsefailure] {
      date {
        match => [ "timestamp", "ISO8601" ]
      }

      # Add severity-based tags
      if [level] in ["error", "ERROR"] {
        mutate {
          add_tag => ["error"]
        }
      }

      if [level] in ["warn", "WARNING", "WARN"] {
        mutate {
          add_tag => ["warning"]
        }
      }

      if [level] in ["fatal", "FATAL", "critical", "CRITICAL"] {
        mutate {
          add_tag => ["critical"]
        }
      }

      # Track user actions
      if [action] {
        mutate {
          add_tag => ["user_action"]
        }
      }

      # Track performance metrics
      if [response_time] {
        mutate {
          convert => { "response_time" => "float" }
        }

        if [response_time] > 2.0 {
          mutate {
            add_tag => ["slow_response"]
          }
        }
      }
    }
  }

  # Add environment and deployment metadata
  mutate {
    add_field => {
      "environment" => "${ENVIRONMENT:development}"
      "service_version" => "${SERVICE_VERSION:unknown}"
      "deployment_id" => "${DEPLOYMENT_ID:unknown}"
    }
  }

  # GeoIP lookup for client IPs
  if [clientip] {
    geoip {
      source => "clientip"
      target => "geoip"
    }
  }

  # Remove sensitive information
  mutate {
    remove_field => ["password", "token", "secret", "key", "authorization"]
  }
}

output {
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "logs-%{+YYYY.MM.dd}"

    # Use different indices for different log types
    if "blockchain" in [tags] {
      index => "blockchain-logs-%{+YYYY.MM.dd}"
    } else if "error" in [tags] {
      index => "error-logs-%{+YYYY.MM.dd}"
    } else if "nginx" in [tags] {
      index => "access-logs-%{+YYYY.MM.dd}"
    }
  }

  # Debug output (remove in production)
  if "debug" in [tags] {
    stdout {
      codec => rubydebug
    }
  }
}